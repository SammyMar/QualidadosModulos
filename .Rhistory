"writexl",
"modelsummary",
'coro',
'getPass','httr'
)
lapply(packages, loadlibrary)
ckanr::ckanr_setup("https://opendatasus.saude.gov.br")
# Crie o nome da variável para buscar o recurso correspondente
var_name <- paste0("arqs", ano - 1995)
ano
# Pesquise o recurso e obtenha o URL
url <- ckanr::package_search("SIM")$results %>%
purrr::map("resources") %>%
purrr::map(purrr::keep, ~ .x$mimetype == "text/csv") %>%
purrr::map_chr(purrr::pluck, 43 - (ano - 1996), "url")
ckanr::package_search("SIM")$results
#carregar pacotes
loadlibrary <- function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = T)
if (!require(x, character.only = TRUE))
stop("Package not found")
}
}
packages <-
c(
"readr",
"readxl",
"janitor",
"dplyr",
"forcats",
"stringr",
"lubridate",
"summarytools",
"magrittr",
"questionr",
"knitr",
"data.table",
"writexl",
"modelsummary",
'coro',
'getPass','httr'
)
lapply(packages, loadlibrary)
ckanr::ckanr_setup("https://opendatasus.saude.gov.br")
# Inicialize o DataFrame total
dados_total <- NULL
# Loop de 1996 a 2021
for (ano in 1996:2021) {
# Crie o nome da variável para buscar o recurso correspondente
var_name <- paste0("arqs", ano - 1995)
# Pesquise o recurso e obtenha o URL
url <- ckanr::package_search("SIM")$results %>%
purrr::map("resources") %>%
purrr::map(purrr::keep, ~ .x$mimetype == "text/csv") %>%
purrr::map_chr(purrr::pluck, 43 - (ano - 1996), "url")
# Baixe os dados e armazene-os em um DataFrame temporário
df <- fread(url, sep = ";")
# Transforme a coluna HORAOBITO em character
df <- df %>%
mutate(HORAOBITO = as.character(HORAOBITO))
# Realize a junção do DataFrame temporário com o DataFrame total
if (is.null(dados_total)) {
dados_total <- df
} else {
dados_total <- full_join(dados_total, df)
}
}
library(data.table)
library(dplyr)
# Inicialize o DataFrame total
dados_total <- NULL
# Loop de 1996 a 2021
for (ano in 1996:2021) {
# Crie o nome da variável para buscar o recurso correspondente
var_name <- paste0("arqs", ano - 1995)
# Pesquise o recurso e obtenha o URL
url <- ckanr::package_search("SIM")$results %>%
purrr::map("resources") %>%
purrr::map(purrr::keep, ~ .x$mimetype == "text/csv") %>%
purrr::map_chr(purrr::pluck, 43 - (ano - 1996), "url")
# Baixe os dados e armazene-os em um DataFrame temporário
df <- fread(url, sep = ";")
# Transforme a coluna HORAOBITO em character
df <- df %>%
mutate(HORAOBITO = as.character(HORAOBITO),
COMUNSVOIM = as.character(COMUNSVOIM) )
# Realize a junção do DataFrame temporário com o DataFrame total
if (is.null(dados_total)) {
dados_total <- df
} else {
dados_total <- full_join(dados_total, df)
}
}
library(data.table)
library(dplyr)
# Inicialize o DataFrame total
dados_total <- NULL
# Loop de 1996 a 2021
for (ano in 1996:2021) {
# Crie o nome da variável para buscar o recurso correspondente
var_name <- paste0("arqs", ano - 1995)
# Pesquise o recurso e obtenha o URL
url <- ckanr::package_search("SIM")$results %>%
purrr::map("resources") %>%
purrr::map(purrr::keep, ~ .x$mimetype == "text/csv") %>%
purrr::map_chr(purrr::pluck, 43 - (ano - 1996), "url")
# Baixe os dados e armazene-os em um DataFrame temporário
df <- fread(url, sep = ";")
# Transforme a coluna HORAOBITO em character
df <- df %>%
mutate(HORAOBITO = as.character(HORAOBITO),
COMUNSVOIM = as.character(COMUNSVOIM),
CIRCOBITO = as.character(CIRCOBITO) )
# Realize a junção do DataFrame temporário com o DataFrame total
if (is.null(dados_total)) {
dados_total <- df
} else {
dados_total <- full_join(dados_total, df)
}
}
ckanr::ckanr_setup("https://opendatasus.saude.gov.br")
library(data.table)
library(dplyr)
# Inicialize o DataFrame total
dados_total <- NULL
# Loop de 1996 a 2021
for (ano in 1996:2021) {
# Crie o nome da variável para buscar o recurso correspondente
var_name <- paste0("arqs", ano - 1995)
# Pesquise o recurso e obtenha o URL
url <- ckanr::package_search("SIM")$results %>%
purrr::map("resources") %>%
purrr::map(purrr::keep, ~ .x$mimetype == "text/csv") %>%
purrr::map_chr(purrr::pluck, 43 - (ano - 1996), "url")
# Baixe os dados e armazene-os em um DataFrame temporário
df <- fread(url, sep = ";")
# Transforme a coluna HORAOBITO em character
df <- df %>%
mutate(HORAOBITO = as.character(HORAOBITO),
COMUNSVOIM = as.character(COMUNSVOIM),
CIRCOBITO = as.character(CIRCOBITO),
CODESTAB = as.character(CODESTAB) )
# Realize a junção do DataFrame temporário com o DataFrame total
if (is.null(dados_total)) {
dados_total <- df
} else {
dados_total <- full_join(dados_total, df)
}
}
df
# Transforme a coluna HORAOBITO em character
df <- df %>%
mutate(HORAOBITO = as.character(HORAOBITO),
COMUNSVOIM = as.character(COMUNSVOIM),
CIRCOBITO = as.character(CIRCOBITO),
CODESTAB = as.character(CODESTAB),
COMUNSVOIM = as.character(COMUNSVOIM) )
df
# Realize a junção do DataFrame temporário com o DataFrame total
if (is.null(dados_total)) {
dados_total <- df
} else {
dados_total <- bind_rows(dados_total, df)
}
# Transforme a coluna HORAOBITO em character
df <- df %>%
mutate(HORAOBITO = as.character(HORAOBITO),
COMUNSVOIM = as.character(COMUNSVOIM),
CIRCOBITO = as.character(CIRCOBITO),
CODESTAB = as.character(CODESTAB))
# Transforme a coluna HORAOBITO em character
df <- df %>%
mutate(HORAOBITO = as.character(HORAOBITO),
CIRCOBITO = as.character(CIRCOBITO),
CODESTAB = as.character(CODESTAB))
# Realize a junção do DataFrame temporário com o DataFrame total
if (is.null(dados_total)) {
dados_total <- df
} else {
dados_total <- bind_rows(dados_total, df)
}
ano
ano = ano + 1
url
# Crie o nome da variável para buscar o recurso correspondente
var_name <- paste0("arqs", ano - 1995)
# Pesquise o recurso e obtenha o URL
url <- ckanr::package_search("SIM")$results %>%
purrr::map("resources") %>%
purrr::map(purrr::keep, ~ .x$mimetype == "text/csv") %>%
purrr::map_chr(purrr::pluck, 43 - (ano - 1996), "url")
url
# Pesquise o recurso e obtenha o URL
url <- ckanr::package_search("SIM")$results %>%
purrr::map("resources") %>%
purrr::map(purrr::keep, ~ .x$mimetype == "text/csv") %>%
purrr::map_chr(purrr::pluck, 43 - (ano - 1996), "url")
# Baixe os dados e armazene-os em um DataFrame temporário
df <- fread(url, sep = ";")
paste0('data1/dado_1996-2020/sim_',ano)
df
# Loop de 1996 a 2021
for (ano in 1996:2020) {
# Crie o nome da variável para buscar o recurso correspondente
var_name <- paste0("arqs", ano - 1995)
# Pesquise o recurso e obtenha o URL
url <- ckanr::package_search("SIM")$results %>%
purrr::map("resources") %>%
purrr::map(purrr::keep, ~ .x$mimetype == "text/csv") %>%
purrr::map_chr(purrr::pluck, 42 - (ano - 1996), "url")
# Baixe os dados e armazene-os na lista
df <- fread(url, sep = ";")
# Transforme a coluna HORAOBITO em character
df <- df %>%
filter(
(OBITOGRAV == 1 | OBITOPUERP == 1 | OBITOPUERP == 2)
)
write.csv(dados_total,file = paste0('data1/dado_1996-2020/sim_',ano), row.names = F)
}
# Loop de 1996 a 2021
for (ano in 1996:2020) {
# Crie o nome da variável para buscar o recurso correspondente
var_name <- paste0("arqs", ano - 1995)
# Pesquise o recurso e obtenha o URL
url <- ckanr::package_search("SIM")$results %>%
purrr::map("resources") %>%
purrr::map(purrr::keep, ~ .x$mimetype == "text/csv") %>%
purrr::map_chr(purrr::pluck, 42 - (ano - 1996), "url")
# Baixe os dados e armazene-os na lista
df <- fread(url, sep = ";")
# Transforme a coluna HORAOBITO em character
df <- df %>%
filter(
(OBITOGRAV == 1 | OBITOPUERP == 1 | OBITOPUERP == 2)
)
write.csv(df,file = paste0('data1/dado_1996-2020/sim_',ano), row.names = F)
}
library(rjson)
library(readr)
library(dplyr)
library(readxl)
SIM_dic <- read_excel("data1/dicionarios.xlsx", sheet = "SIM")
############## INCOMPLETUDE ################################################
regras_sim_incom <- c(fromJSON(file = 'data1/SIM_Incompletude_Regras.json'))
SIM_Incom <- read_csv("data1/SIM_Incompletude_1996-2020.csv",show_col_types = FALSE )
## code to prepare `SIM` dataset goes here
library(rjson)
library(readr)
library(dplyr)
library(readxl)
SIM_dic <- read_excel("data1/dicionarios.xlsx", sheet = "SIM")
############## INCOMPLETUDE ################################################
regras_sim_incom <- c(fromJSON(file = 'data1/SIM_Incompletude_Regras.json'))
SIM_Incom <- read_csv("data1/SIM_Incompletude_1996_2020.csv",show_col_types = FALSE )
S2021 <- read_csv("data1/SIM_Incompletude_2021_2022.csv",show_col_types = FALSE )
S2021
View(S2021)
View(SIM_Incom)
loadlibrary <- function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = T)
if (!require(x, character.only = TRUE))
stop("Package not found")
}
}
packages <-
c(
"readr",
"readxl",
"janitor",
"dplyr",
"forcats",
"stringr",
"lubridate",
"summarytools",
"magrittr",
"questionr",
"knitr",
"data.table",
"writexl",
"modelsummary",
'coro',
'getPass','httr'
)
lapply(packages, loadlibrary)
ckanr::ckanr_setup("https://opendatasus.saude.gov.br")
# SIM -------------------------------------------
#2022
arqs <- ckanr::package_search("SIM")$results %>%
purrr::map("resources") %>%
purrr::map(purrr::keep, ~ .x$mimetype == "text/csv") %>%
purrr::map_chr(purrr::pluck,44, "url")
#2021
arqs1 <- ckanr::package_search("SIM")$results %>%
purrr::map("resources") %>%
purrr::map(purrr::keep, ~ .x$mimetype == "text/csv") %>%
purrr::map_chr(purrr::pluck,43, "url")
#1996 - 2020
# # Loop de 1996 a 2020
# for (ano in 1996:2020) {
#
#   # Crie o nome da variável para buscar o recurso correspondente
#   var_name <- paste0("arqs", ano - 1995)
#
#   # Pesquise o recurso e obtenha o URL
#   url <- ckanr::package_search("SIM")$results %>%
#     purrr::map("resources") %>%
#     purrr::map(purrr::keep, ~ .x$mimetype == "text/csv") %>%
#     purrr::map_chr(purrr::pluck, 42 - (ano - 1996), "url")
#   # Baixe os dados e armazene-os na lista
#   df <- fread(url, sep = ";")
#   # Transforme a coluna HORAOBITO em character
#   df <- df %>%
#     filter(
#       (OBITOGRAV == 1 | OBITOPUERP == 1 | OBITOPUERP == 2)
#     )
#   write.csv(df,file = paste0('data1/dado_1996-2020/sim_',ano), row.names = F)
# }
dados_a <- fread(arqs, sep = ";")
dados_b <- fread(arqs1, sep = ";")
dados_total <- full_join(dados_a, dados_b)
dados_total <- dados_total %>%
filter(
(OBITOGRAV == 1 | OBITOPUERP == 1 | OBITOPUERP == 2)
)
dados_total <-as.data.frame(dados_total)
write.csv(dados_total,file = 'data1/sim2021-2022.csv', row.names = F)
## code to prepare `SIM` dataset goes here
library(rjson)
library(readr)
library(dplyr)
library(readxl)
SIM_dic <- read_excel("data1/dicionarios.xlsx", sheet = "SIM")
############## INCOMPLETUDE ################################################
regras_sim_incom <- c(fromJSON(file = 'data1/SIM_Incompletude_Regras.json'))
SIM_Incom <- read_csv("data1/SIM_Incompletude_1996_2020.csv",show_col_types = FALSE )
S2021 <- read_csv("data1/SIM_Incompletude_2021_2022.csv",show_col_types = FALSE )
View(S2021)
## code to prepare `SIM` dataset goes here
library(rjson)
library(readr)
library(dplyr)
library(readxl)
SIM_dic <- read_excel("data1/dicionarios.xlsx", sheet = "SIM")
############## INCOMPLETUDE ################################################
regras_sim_incom <- c(fromJSON(file = 'data1/SIM_Incompletude_Regras.json'))
SIM_Incom <- read_csv("data1/SIM_Incompletude_1996_2020.csv",show_col_types = FALSE )
S2021 <- read_csv("data1/SIM_Incompletude_2021_2022.csv",show_col_types = FALSE )
SIM_Incom <- rbind(SIM_Incom,S2021)
# S2021$VARIAVEL %>% unique()
# SIM_Incom$VARIAVEL %>%  unique()
# setdiff(SIM_Incom$VARIAVEL, S2021$VARIAVEL)  %in% SIM_dic$`Codigo SIM`
#ACRESCENTAR A COLUNA DE MUNICIPIOS E MUNICIPIOS
####################################################################################
aux_muni2 <- abjData::muni %>%
dplyr::select(uf_id,
muni_id,
muni_nm_clean,
uf_sigla) %>%
mutate_at("muni_id", as.character)  %>%
mutate(cod_mun = stringr::str_sub(muni_id, 1, 7))
aux_muni2 <- rbind(aux_muni2,aux_muni2|>
mutate(cod_mun = stringr::str_sub(muni_id, 1, 6)))
####################################################################################
SIM_Incom$CODMUNOCOR  <- as.character(format(SIM_Incom$CODMUNOCOR  , scientific = FALSE))
SIM_Incom$CODMUNOCOR  <- gsub(' ','',SIM_Incom$CODMUNOCOR)
SIM_Incom <- SIM_Incom %>%
rename(cod_mun = CODMUNOCOR ) %>%
left_join(aux_muni2 ,by='cod_mun')
SIM_Incom[,c('muni_id','uf_id')] <- NULL
SIM_Incom <- SIM_Incom |>
mutate(uf_id = stringr::str_sub(cod_mun,1,2))
SIM_Incom[is.na(SIM_Incom$uf_sigla)==T,'uf_sigla']<-
SIM_Incom[is.na(SIM_Incom$uf_sigla)==T,]|>
left_join(unique(aux_muni2[,c('uf_id','uf_sigla')]),by = 'uf_id') |> dplyr::select(uf_sigla.y)
SIM_Incom[is.na(SIM_Incom$muni_nm_clean)==T,'muni_nm_clean'] <- 'Não informado'
SIM_Incom$CODMUNNASC <- SIM_Incom$muni_nm_clean
SIM_Incom$ESTADO <- SIM_Incom$uf_sigla
SIM_Incom[,c('cod_mun','uf_id','uf_sigla','muni_nm_clean')] <- NULL
var_sim_tirar <- c('CODBAIOCOR',
'CODCART',
'CODMUNCART',
'CONTADOR',
'DTREGCART',
'EXPDIFDATA',
'NUMREGCART',
'UFINFORM',
'ALTCAUSA',
'DTCADINF',
'DTCADINV',
'DTCONCASO',
'DTCONINV',
'ESTABDESCR',
'FONTES',
'FONTESINF',
'MORTEPARTO',
'NUDIASINF',
'NUDIASOBCO',
'NUDIASOBIN',
'ORIGEM',
'TPNIVELINV',
'TPOBITOCOR',
'TPRESGINFO')
SIM_Incom <- SIM_Incom[!(SIM_Incom$VARIAVEL %in% var_sim_tirar),]
var_aux <- SIM_Incom$VARIAVEL |> unique()
SIM_Incom <- merge(SIM_Incom, SIM_dic[,c("Codigo Qualidados", "Codigo SIM") ], by.x="VARIAVEL", by.y="Codigo SIM", all=TRUE)
SIM_Incom <- SIM_Incom[SIM_Incom$VARIAVEL %in% var_aux,]
SIM_Incom$VARIAVEL <- SIM_Incom$`Codigo Qualidados`
SIM_Incom$`Codigo Qualidados` <- NULL
vars_incom_sim<- unique(SIM_Incom$VARIAVEL)
################# REGRAS
df_aux <- regras_sim_incom |> as.data.frame() |> t() |> as.data.frame()
df_aux<-  cbind(row.names(df_aux),df_aux)
df_aux |> row.names() <- NULL
df_aux$`row.names(df_aux)` <- df_aux$`row.names(df_aux)` |> gsub(pattern = 'IGNORADOS_', replacement = '')
colnames(df_aux) <- c('Variável','Regra')
regras_sim_incom <- df_aux
dados_oobr_qualidados_SIM_Incompletude_1996_2022 <- SIM_Incom
usethis::use_data(dados_oobr_qualidados_SIM_Incompletude_1996_2022, overwrite = TRUE)
usethis::use_data(vars_incom_sim, overwrite = TRUE)
############# IMPLAUSIBILIDADE ####################################################
regras_sim_implau <- c(fromJSON(file = 'data1/SIM_Implausibilidade_Regras.json'))
SIM_Implau <- read_csv("data1/SIM_Implausibilidade_1996_2020.csv",show_col_types = FALSE )
## code to prepare `SIM` dataset goes here
library(rjson)
library(readr)
library(dplyr)
library(readxl)
SIM_dic <- read_excel("data1/dicionarios.xlsx", sheet = "SIM")
############## INCOMPLETUDE ################################################
regras_sim_incom <- c(fromJSON(file = 'data1/SIM_Incompletude_Regras.json'))
SIM_Incom <- read_csv("data1/SIM_Incompletude_1996_2020.csv",show_col_types = FALSE )
S2021 <- read_csv("data1/SIM_Incompletude_2021_2022.csv",show_col_types = FALSE )
SIM_Incom <- rbind(SIM_Incom,S2021)
# S2021$VARIAVEL %>% unique()
# SIM_Incom$VARIAVEL %>%  unique()
# setdiff(SIM_Incom$VARIAVEL, S2021$VARIAVEL)  %in% SIM_dic$`Codigo SIM`
#ACRESCENTAR A COLUNA DE MUNICIPIOS E MUNICIPIOS
####################################################################################
aux_muni2 <- abjData::muni %>%
dplyr::select(uf_id,
muni_id,
muni_nm_clean,
uf_sigla) %>%
mutate_at("muni_id", as.character)  %>%
mutate(cod_mun = stringr::str_sub(muni_id, 1, 7))
aux_muni2 <- rbind(aux_muni2,aux_muni2|>
mutate(cod_mun = stringr::str_sub(muni_id, 1, 6)))
####################################################################################
SIM_Incom$CODMUNOCOR  <- as.character(format(SIM_Incom$CODMUNOCOR  , scientific = FALSE))
SIM_Incom$CODMUNOCOR  <- gsub(' ','',SIM_Incom$CODMUNOCOR)
SIM_Incom <- SIM_Incom %>%
rename(cod_mun = CODMUNOCOR ) %>%
left_join(aux_muni2 ,by='cod_mun')
SIM_Incom[,c('muni_id','uf_id')] <- NULL
SIM_Incom <- SIM_Incom |>
mutate(uf_id = stringr::str_sub(cod_mun,1,2))
SIM_Incom[is.na(SIM_Incom$uf_sigla)==T,'uf_sigla']<-
SIM_Incom[is.na(SIM_Incom$uf_sigla)==T,]|>
left_join(unique(aux_muni2[,c('uf_id','uf_sigla')]),by = 'uf_id') |> dplyr::select(uf_sigla.y)
SIM_Incom[is.na(SIM_Incom$muni_nm_clean)==T,'muni_nm_clean'] <- 'Não informado'
SIM_Incom$CODMUNNASC <- SIM_Incom$muni_nm_clean
SIM_Incom$ESTADO <- SIM_Incom$uf_sigla
SIM_Incom[,c('cod_mun','uf_id','uf_sigla','muni_nm_clean')] <- NULL
var_sim_tirar <- c('CODBAIOCOR',
'CODCART',
'CODMUNCART',
'CONTADOR',
'DTREGCART',
'EXPDIFDATA',
'NUMREGCART',
'UFINFORM',
'ALTCAUSA',
'DTCADINF',
'DTCADINV',
'DTCONCASO',
'DTCONINV',
'ESTABDESCR',
'FONTES',
'FONTESINF',
'MORTEPARTO',
'NUDIASINF',
'NUDIASOBCO',
'NUDIASOBIN',
'ORIGEM',
'TPNIVELINV',
'TPOBITOCOR',
'TPRESGINFO')
SIM_Incom <- SIM_Incom[!(SIM_Incom$VARIAVEL %in% var_sim_tirar),]
var_aux <- SIM_Incom$VARIAVEL |> unique()
SIM_Incom <- merge(SIM_Incom, SIM_dic[,c("Codigo Qualidados", "Codigo SIM") ], by.x="VARIAVEL", by.y="Codigo SIM", all=TRUE)
SIM_Incom <- SIM_Incom[SIM_Incom$VARIAVEL %in% var_aux,]
SIM_Incom$VARIAVEL <- SIM_Incom$`Codigo Qualidados`
SIM_Incom$`Codigo Qualidados` <- NULL
vars_incom_sim<- unique(SIM_Incom$VARIAVEL)
################# REGRAS
df_aux <- regras_sim_incom |> as.data.frame() |> t() |> as.data.frame()
df_aux<-  cbind(row.names(df_aux),df_aux)
df_aux |> row.names() <- NULL
df_aux$`row.names(df_aux)` <- df_aux$`row.names(df_aux)` |> gsub(pattern = 'IGNORADOS_', replacement = '')
colnames(df_aux) <- c('Variável','Regra')
regras_sim_incom <- df_aux
dados_oobr_qualidados_SIM_Incompletude_1996_2022 <- SIM_Incom
usethis::use_data(dados_oobr_qualidados_SIM_Incompletude_1996_2022, overwrite = TRUE)
usethis::use_data(vars_incom_sim, overwrite = TRUE)
############# IMPLAUSIBILIDADE ####################################################
regras_sim_implau <- c(fromJSON(file = 'data1/SIM_Implausibilidade_Regras.json'))
SIM_Implau <- read_csv("data1/SIM_Implausibilidade_1996-2020.csv",show_col_types = FALSE )
SIM_Implau <- read_csv("data1/SIM_Implausibilidade_1996-2020.csv",show_col_types = FALSE )
getwd
getwd()
